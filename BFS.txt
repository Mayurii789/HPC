************************BFS************
#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    void parallelBFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int size = q.size();

            #pragma omp parallel for
            for (int i = 0; i < size; ++i) {
                int u;
                #pragma omp critical
                {
                    u = q.front();
                    q.pop();
                }

                cout << u << " ";

                for (int v : adj[u]) {
                    if (!visited[v]) {
                        #pragma omp critical
                        {
                            visited[v] = true;
                            q.push(v);
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int V = 6;
    Graph g(V);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "BFS traversal starting from vertex 0: ";
    g.parallelBFS(0);
    cout << endl;

    return 0;
}

*******************OUTPUT*********************
BFS traversal starting from vertex 0: 0 1 2 3 4 5 
