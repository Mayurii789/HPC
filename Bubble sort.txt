#include <iostream>
#include <vector>
#include <ctime>
#include <omp.h>

using namespace std;

// Sequential Bubble Sort
void sequential_bubble_sort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        bool swapped = false;
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped) {
            break;
        }
    }
}

// Parallel Bubble Sort
void parallel_bubble_sort(vector<int>& arr) {
    int n = arr.size();
    bool swapped = true;

    while (swapped) {
        swapped = false;

        #pragma omp parallel for shared(swapped)
        for (int i = 0; i < n - 1; ++i) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
    }
}

int main() {
    const int N = 10000;
    vector<int> arr(N);

    // Generate random data
    srand(time(nullptr));
    for (int i = 0; i < N; ++i) {
        arr[i] = rand() % 10000;
    }

    // Measure performance of sequential Bubble Sort
    vector<int> arr_seq_bubble = arr;
    clock_t start = clock();
    sequential_bubble_sort(arr_seq_bubble);
    clock_t end = clock();
    double seq_time_bubble = double(end - start) / CLOCKS_PER_SEC;

    cout << "Sequential Bubble Sort Time: " << seq_time_bubble << " seconds" << endl;

    // Measure performance of parallel Bubble Sort
    vector<int> arr_par_bubble = arr;
    start = clock();
    parallel_bubble_sort(arr_par_bubble);
    end = clock();
    double par_time_bubble = double(end - start) / CLOCKS_PER_SEC;

    cout << "Parallel Bubble Sort Time: " << par_time_bubble << " seconds" << endl;

    return 0;
}


***************OUTPUT**************

Sequential Bubble Sort Time: 0.587062 seconds
Parallel Bubble Sort Time: 0.737713 seconds