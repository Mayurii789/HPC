#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    void parallelDFS(int start) {
        vector<bool> visited(V, false);
        stack<int> s;

        s.push(start);

        while (!s.empty()) {
            int u;
            #pragma omp critical
            {
                u = s.top();
                s.pop();
            }

            if (!visited[u]) {
                cout << u << " ";
                visited[u] = true;

                #pragma omp parallel for
                for (int v : adj[u]) {
                    if (!visited[v]) {
                        #pragma omp critical
                        {
                            s.push(v);
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int V = 6;
    Graph g(V);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "DFS traversal starting from vertex 0: ";
    g.parallelDFS(0);
    cout << endl;

    return 0;
}

**************OUTPUT************************

DFS traversal starting from vertex 0: 0 2 5 1 4 3 